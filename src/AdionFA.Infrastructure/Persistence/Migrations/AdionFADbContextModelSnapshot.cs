// <auto-generated />
using System;
using AdionFA.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AdionFA.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AdionFADbContext))]
    partial class AdionFADbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.9");

            modelBuilder.Entity("AdionFA.Domain.Entities.Configuration.AssemblyBuilderConfiguration", b =>
                {
                    b.Property<int>("AssemblyBuilderConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssemblyNodesDOWNTarget")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssemblyNodesUPTarget")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MaxSuccessRateImprovementIS")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MaxSuccessRateImprovementOS")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MinSuccessRateImprovementIS")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MinSuccessRateImprovementOS")
                        .HasColumnType("TEXT");

                    b.Property<int>("MinTotalTradesIS")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalTradesTarget")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("WekaEndDepth")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("WekaMaxRatio")
                        .HasColumnType("TEXT");

                    b.Property<int>("WekaNTotal")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WekaStartDepth")
                        .HasColumnType("INTEGER");

                    b.HasKey("AssemblyBuilderConfigurationId");

                    b.ToTable("AssemblyBuilderConfiguration");

                    b.HasData(
                        new
                        {
                            AssemblyBuilderConfigurationId = 1,
                            AssemblyNodesDOWNTarget = 6,
                            AssemblyNodesUPTarget = 6,
                            CreatedOn = new DateTime(2023, 8, 20, 16, 11, 13, 84, DateTimeKind.Utc).AddTicks(8502),
                            IsDeleted = false,
                            MaxSuccessRateImprovementIS = 4m,
                            MaxSuccessRateImprovementOS = 4m,
                            MinSuccessRateImprovementIS = 2m,
                            MinSuccessRateImprovementOS = 2m,
                            MinTotalTradesIS = 100,
                            TotalTradesTarget = 1000,
                            WekaEndDepth = 6,
                            WekaMaxRatio = 1.5m,
                            WekaNTotal = 300,
                            WekaStartDepth = 1
                        });
                });

            modelBuilder.Entity("AdionFA.Domain.Entities.Configuration.CrossingBuilderConfiguration", b =>
                {
                    b.Property<int>("CrossingBuilderConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MaxSuccessRateImprovementIS")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MaxSuccessRateImprovementOS")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MinSuccessRateImprovementIS")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MinSuccessRateImprovementOS")
                        .HasColumnType("TEXT");

                    b.Property<int>("StrategyNodesDOWNTarget")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StrategyNodesUPTarget")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalTradesTarget")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("WekaEndDepth")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("WekaMaxRatio")
                        .HasColumnType("TEXT");

                    b.Property<int>("WekaNTotal")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WekaStartDepth")
                        .HasColumnType("INTEGER");

                    b.HasKey("CrossingBuilderConfigurationId");

                    b.ToTable("CrossingBuilderConfiguration");

                    b.HasData(
                        new
                        {
                            CrossingBuilderConfigurationId = 1,
                            CreatedOn = new DateTime(2023, 8, 20, 16, 11, 13, 84, DateTimeKind.Utc).AddTicks(8536),
                            IsDeleted = false,
                            MaxSuccessRateImprovementIS = 4m,
                            MaxSuccessRateImprovementOS = 4m,
                            MinSuccessRateImprovementIS = 2m,
                            MinSuccessRateImprovementOS = 2m,
                            StrategyNodesDOWNTarget = 6,
                            StrategyNodesUPTarget = 6,
                            TotalTradesTarget = 1000,
                            WekaEndDepth = 6,
                            WekaMaxRatio = 1.5m,
                            WekaNTotal = 300,
                            WekaStartDepth = 1
                        });
                });

            modelBuilder.Entity("AdionFA.Domain.Entities.Configuration.NodeBuilderConfiguration", b =>
                {
                    b.Property<int>("NodeBuilderConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MaxSuccessRateVariation")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MinSuccessRatePercentIS")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MinSuccessRatePercentOS")
                        .HasColumnType("TEXT");

                    b.Property<int>("MinTotalTradesIS")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinTotalTradesOS")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NodesDOWNTarget")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NodesUPTarget")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalTradesTarget")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("WekaEndDepth")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("WekaMaxRatio")
                        .HasColumnType("TEXT");

                    b.Property<int>("WekaNTotal")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WekaStartDepth")
                        .HasColumnType("INTEGER");

                    b.HasKey("NodeBuilderConfigurationId");

                    b.ToTable("NodeBuilderConfiguration");

                    b.HasData(
                        new
                        {
                            NodeBuilderConfigurationId = 1,
                            CreatedOn = new DateTime(2023, 8, 20, 16, 11, 13, 84, DateTimeKind.Utc).AddTicks(8454),
                            IsDeleted = false,
                            MaxSuccessRateVariation = 5m,
                            MinSuccessRatePercentIS = 40m,
                            MinSuccessRatePercentOS = 40m,
                            MinTotalTradesIS = 200,
                            MinTotalTradesOS = 100,
                            NodesDOWNTarget = 6,
                            NodesUPTarget = 6,
                            TotalTradesTarget = 100,
                            WekaEndDepth = 12,
                            WekaMaxRatio = 1.5m,
                            WekaNTotal = 300,
                            WekaStartDepth = 4
                        });
                });

            modelBuilder.Entity("AdionFA.Domain.Entities.GlobalConfiguration", b =>
                {
                    b.Property<int>("GlobalConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssemblyBuilderConfigurationId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("CrossingBuilderConfigurationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExpertAdvisorHost")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExpertAdvisorPublisherPort")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExpertAdvisorResponsePort")
                        .HasColumnType("TEXT");

                    b.Property<int>("ExtractorMinVariation")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FromDateIS")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FromDateOS")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsProgressiveness")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MaxCorrelationPercent")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxParallelism")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MaxProgressivenessVariation")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaximumSeed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinimalSeed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NodeBuilderConfigurationId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ToDateIS")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ToDateOS")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalDecimalWeka")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("WithoutSchedule")
                        .HasColumnType("INTEGER");

                    b.HasKey("GlobalConfigurationId");

                    b.HasIndex("AssemblyBuilderConfigurationId");

                    b.HasIndex("CrossingBuilderConfigurationId");

                    b.HasIndex("NodeBuilderConfigurationId");

                    b.ToTable("GlobalConfiguration");

                    b.HasData(
                        new
                        {
                            GlobalConfigurationId = 1,
                            AssemblyBuilderConfigurationId = 1,
                            CreatedOn = new DateTime(2023, 8, 20, 16, 11, 13, 84, DateTimeKind.Utc).AddTicks(8407),
                            CrossingBuilderConfigurationId = 1,
                            ExpertAdvisorHost = "192.168.1.35",
                            ExpertAdvisorPublisherPort = "5551",
                            ExpertAdvisorResponsePort = "5550",
                            ExtractorMinVariation = 50,
                            IsDeleted = false,
                            IsProgressiveness = false,
                            MaxCorrelationPercent = 2m,
                            MaxParallelism = 1,
                            MaxProgressivenessVariation = 2m,
                            MaximumSeed = 1000000,
                            MinimalSeed = 100,
                            NodeBuilderConfigurationId = 1,
                            TotalDecimalWeka = 5,
                            WithoutSchedule = true
                        });
                });

            modelBuilder.Entity("AdionFA.Domain.Entities.GlobalScheduleConfiguration", b =>
                {
                    b.Property<int>("GlobalScheduleConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("FromTimeInSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GlobalConfigurationId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MarketRegionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ToTimeInSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("GlobalScheduleConfigurationId");

                    b.HasIndex("GlobalConfigurationId");

                    b.HasIndex("MarketRegionId");

                    b.ToTable("GlobalScheduleConfiguration");

                    b.HasData(
                        new
                        {
                            GlobalScheduleConfigurationId = 1,
                            CreatedOn = new DateTime(2023, 8, 20, 16, 11, 13, 84, DateTimeKind.Utc).AddTicks(8577),
                            FromTimeInSeconds = 54000,
                            GlobalConfigurationId = 1,
                            IsDeleted = false,
                            MarketRegionId = 1,
                            ToTimeInSeconds = 82800
                        },
                        new
                        {
                            GlobalScheduleConfigurationId = 2,
                            CreatedOn = new DateTime(2023, 8, 20, 16, 11, 13, 84, DateTimeKind.Utc).AddTicks(8594),
                            FromTimeInSeconds = 32400,
                            GlobalConfigurationId = 1,
                            IsDeleted = false,
                            MarketRegionId = 2,
                            ToTimeInSeconds = 64800
                        },
                        new
                        {
                            GlobalScheduleConfigurationId = 3,
                            CreatedOn = new DateTime(2023, 8, 20, 16, 11, 13, 84, DateTimeKind.Utc).AddTicks(8601),
                            FromTimeInSeconds = 3600,
                            GlobalConfigurationId = 1,
                            IsDeleted = false,
                            MarketRegionId = 3,
                            ToTimeInSeconds = 32400
                        });
                });

            modelBuilder.Entity("AdionFA.Domain.Entities.HistoricalData", b =>
                {
                    b.Property<int>("HistoricalDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MarketId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SymbolId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeframeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("HistoricalDataId");

                    b.HasIndex("MarketId");

                    b.HasIndex("SymbolId");

                    b.HasIndex("TimeframeId");

                    b.ToTable("HistoricalData");
                });

            modelBuilder.Entity("AdionFA.Domain.Entities.HistoricalDataCandle", b =>
                {
                    b.Property<int>("HistoricalDataCandleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Close")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<double>("High")
                        .HasColumnType("REAL");

                    b.Property<int>("HistoricalDataId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Low")
                        .HasColumnType("REAL");

                    b.Property<double>("Open")
                        .HasColumnType("REAL");

                    b.Property<double>("Spread")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<long>("StartTime")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<double>("Volume")
                        .HasColumnType("REAL");

                    b.HasKey("HistoricalDataCandleId");

                    b.HasIndex("HistoricalDataId");

                    b.ToTable("HistoricalDataCandle");
                });

            modelBuilder.Entity("AdionFA.Domain.Entities.Market", b =>
                {
                    b.Property<int>("MarketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("MarketId");

                    b.ToTable("Market");

                    b.HasData(
                        new
                        {
                            MarketId = 1,
                            Code = "Forex",
                            CreatedOn = new DateTime(2023, 8, 20, 16, 11, 13, 84, DateTimeKind.Utc).AddTicks(7806),
                            IsDeleted = false,
                            Name = "Forex"
                        });
                });

            modelBuilder.Entity("AdionFA.Domain.Entities.MarketRegion", b =>
                {
                    b.Property<int>("MarketRegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("MarketRegionId");

                    b.ToTable("MarketRegion");

                    b.HasData(
                        new
                        {
                            MarketRegionId = 1,
                            Code = "America",
                            CreatedOn = new DateTime(2023, 8, 20, 16, 11, 13, 84, DateTimeKind.Utc).AddTicks(8052),
                            IsDeleted = false,
                            Name = "America"
                        },
                        new
                        {
                            MarketRegionId = 2,
                            Code = "Europe",
                            CreatedOn = new DateTime(2023, 8, 20, 16, 11, 13, 84, DateTimeKind.Utc).AddTicks(8211),
                            IsDeleted = false,
                            Name = "Europe"
                        },
                        new
                        {
                            MarketRegionId = 3,
                            Code = "Asia",
                            CreatedOn = new DateTime(2023, 8, 20, 16, 11, 13, 84, DateTimeKind.Utc).AddTicks(8358),
                            IsDeleted = false,
                            Name = "Asia"
                        });
                });

            modelBuilder.Entity("AdionFA.Domain.Entities.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("HistoricalDataId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProjectName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkspacePath")
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectId");

                    b.HasIndex("HistoricalDataId");

                    b.HasIndex("ProjectName")
                        .IsUnique();

                    b.ToTable("Project");
                });

            modelBuilder.Entity("AdionFA.Domain.Entities.ProjectConfiguration", b =>
                {
                    b.Property<int>("ProjectConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssemblyBuilderConfigurationId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("CrossingBuilderConfigurationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExpertAdvisorHost")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExpertAdvisorPublisherPort")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExpertAdvisorResponsePort")
                        .HasColumnType("TEXT");

                    b.Property<int>("ExtractorMinVariation")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FromDateIS")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FromDateOS")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsProgressiveness")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MaxCorrelationPercent")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxParallelism")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MaxProgressivenessVariation")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaximumSeed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinimalSeed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NodeBuilderConfigurationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ToDateIS")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ToDateOS")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalDecimalWeka")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("WithoutSchedule")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectConfigurationId");

                    b.HasIndex("AssemblyBuilderConfigurationId");

                    b.HasIndex("CrossingBuilderConfigurationId");

                    b.HasIndex("NodeBuilderConfigurationId");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("ProjectConfiguration");
                });

            modelBuilder.Entity("AdionFA.Domain.Entities.ProjectScheduleConfiguration", b =>
                {
                    b.Property<int>("ProjectScheduleConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("FromTimeInSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MarketRegionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectConfigurationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ToTimeInSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectScheduleConfigurationId");

                    b.HasIndex("MarketRegionId");

                    b.HasIndex("ProjectConfigurationId");

                    b.ToTable("ProjectScheduleConfiguration");
                });

            modelBuilder.Entity("AdionFA.Domain.Entities.Setting", b =>
                {
                    b.Property<int>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("SettingId");

                    b.ToTable("Setting");

                    b.HasData(
                        new
                        {
                            SettingId = 1,
                            Code = "Culture",
                            CreatedOn = new DateTime(2023, 8, 20, 16, 11, 13, 84, DateTimeKind.Utc).AddTicks(4720),
                            IsDeleted = false,
                            Name = "Culture",
                            Value = "eng"
                        },
                        new
                        {
                            SettingId = 2,
                            Code = "Theme",
                            CreatedOn = new DateTime(2023, 8, 20, 16, 11, 13, 84, DateTimeKind.Utc).AddTicks(4944),
                            IsDeleted = false,
                            Name = "Theme",
                            Value = "Light"
                        },
                        new
                        {
                            SettingId = 3,
                            Code = "Color",
                            CreatedOn = new DateTime(2023, 8, 20, 16, 11, 13, 84, DateTimeKind.Utc).AddTicks(5104),
                            IsDeleted = false,
                            Name = "Color",
                            Value = "Orange"
                        },
                        new
                        {
                            SettingId = 4,
                            Code = "DefaultWorkspace",
                            CreatedOn = new DateTime(2023, 8, 20, 16, 11, 13, 84, DateTimeKind.Utc).AddTicks(5294),
                            IsDeleted = false,
                            Name = "DefaultWorkspace",
                            Value = ""
                        },
                        new
                        {
                            SettingId = 5,
                            Code = "Host",
                            CreatedOn = new DateTime(2023, 8, 20, 16, 11, 13, 84, DateTimeKind.Utc).AddTicks(5456),
                            IsDeleted = false,
                            Name = "Host",
                            Value = "192.168.50.137"
                        },
                        new
                        {
                            SettingId = 6,
                            Code = "Port",
                            CreatedOn = new DateTime(2023, 8, 20, 16, 11, 13, 84, DateTimeKind.Utc).AddTicks(5636),
                            IsDeleted = false,
                            Name = "Port",
                            Value = "5555"
                        });
                });

            modelBuilder.Entity("AdionFA.Domain.Entities.Symbol", b =>
                {
                    b.Property<int>("SymbolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("SymbolId");

                    b.ToTable("Symbol");

                    b.HasData(
                        new
                        {
                            SymbolId = 1,
                            Code = "EURUSD",
                            CreatedOn = new DateTime(2023, 8, 20, 16, 11, 13, 84, DateTimeKind.Utc).AddTicks(5901),
                            IsDeleted = false,
                            Name = "EURUSD",
                            Value = ""
                        });
                });

            modelBuilder.Entity("AdionFA.Domain.Entities.Timeframe", b =>
                {
                    b.Property<int>("TimeframeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("TimeframeId");

                    b.ToTable("Timeframe");

                    b.HasData(
                        new
                        {
                            TimeframeId = 1,
                            Code = "M1",
                            CreatedOn = new DateTime(2023, 8, 20, 16, 11, 13, 84, DateTimeKind.Utc).AddTicks(6206),
                            IsDeleted = false,
                            Name = "1 Minute",
                            Value = "1"
                        },
                        new
                        {
                            TimeframeId = 2,
                            Code = "M5",
                            CreatedOn = new DateTime(2023, 8, 20, 16, 11, 13, 84, DateTimeKind.Utc).AddTicks(6378),
                            IsDeleted = false,
                            Name = "5 Minutes",
                            Value = "5"
                        },
                        new
                        {
                            TimeframeId = 3,
                            Code = "M15",
                            CreatedOn = new DateTime(2023, 8, 20, 16, 11, 13, 84, DateTimeKind.Utc).AddTicks(6551),
                            IsDeleted = false,
                            Name = "15 Minutes",
                            Value = "15"
                        },
                        new
                        {
                            TimeframeId = 4,
                            Code = "M30",
                            CreatedOn = new DateTime(2023, 8, 20, 16, 11, 13, 84, DateTimeKind.Utc).AddTicks(6718),
                            IsDeleted = false,
                            Name = "30 Minutes",
                            Value = "30"
                        },
                        new
                        {
                            TimeframeId = 5,
                            Code = "H1",
                            CreatedOn = new DateTime(2023, 8, 20, 16, 11, 13, 84, DateTimeKind.Utc).AddTicks(6873),
                            IsDeleted = false,
                            Name = "1 Hour",
                            Value = "16385"
                        },
                        new
                        {
                            TimeframeId = 6,
                            Code = "H4",
                            CreatedOn = new DateTime(2023, 8, 20, 16, 11, 13, 84, DateTimeKind.Utc).AddTicks(7048),
                            IsDeleted = false,
                            Name = "4 Hours",
                            Value = "16388"
                        },
                        new
                        {
                            TimeframeId = 7,
                            Code = "D1",
                            CreatedOn = new DateTime(2023, 8, 20, 16, 11, 13, 84, DateTimeKind.Utc).AddTicks(7213),
                            IsDeleted = false,
                            Name = "Daily",
                            Value = "16408"
                        },
                        new
                        {
                            TimeframeId = 8,
                            Code = "W1",
                            CreatedOn = new DateTime(2023, 8, 20, 16, 11, 13, 84, DateTimeKind.Utc).AddTicks(7368),
                            IsDeleted = false,
                            Name = "Weekly",
                            Value = "32769"
                        },
                        new
                        {
                            TimeframeId = 9,
                            Code = "MN1",
                            CreatedOn = new DateTime(2023, 8, 20, 16, 11, 13, 84, DateTimeKind.Utc).AddTicks(7555),
                            IsDeleted = false,
                            Name = "Monthly",
                            Value = "49153"
                        });
                });

            modelBuilder.Entity("AdionFA.Domain.Entities.GlobalConfiguration", b =>
                {
                    b.HasOne("AdionFA.Domain.Entities.Configuration.AssemblyBuilderConfiguration", "AssemblyBuilderConfiguration")
                        .WithMany()
                        .HasForeignKey("AssemblyBuilderConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdionFA.Domain.Entities.Configuration.CrossingBuilderConfiguration", "CrossingBuilderConfiguration")
                        .WithMany()
                        .HasForeignKey("CrossingBuilderConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdionFA.Domain.Entities.Configuration.NodeBuilderConfiguration", "NodeBuilderConfiguration")
                        .WithMany()
                        .HasForeignKey("NodeBuilderConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssemblyBuilderConfiguration");

                    b.Navigation("CrossingBuilderConfiguration");

                    b.Navigation("NodeBuilderConfiguration");
                });

            modelBuilder.Entity("AdionFA.Domain.Entities.GlobalScheduleConfiguration", b =>
                {
                    b.HasOne("AdionFA.Domain.Entities.GlobalConfiguration", "GlobalConfiguration")
                        .WithMany("GlobalScheduleConfigurations")
                        .HasForeignKey("GlobalConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdionFA.Domain.Entities.MarketRegion", "MarketRegion")
                        .WithMany()
                        .HasForeignKey("MarketRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GlobalConfiguration");

                    b.Navigation("MarketRegion");
                });

            modelBuilder.Entity("AdionFA.Domain.Entities.HistoricalData", b =>
                {
                    b.HasOne("AdionFA.Domain.Entities.Market", "Market")
                        .WithMany()
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdionFA.Domain.Entities.Symbol", "Symbol")
                        .WithMany()
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdionFA.Domain.Entities.Timeframe", "Timeframe")
                        .WithMany()
                        .HasForeignKey("TimeframeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Market");

                    b.Navigation("Symbol");

                    b.Navigation("Timeframe");
                });

            modelBuilder.Entity("AdionFA.Domain.Entities.HistoricalDataCandle", b =>
                {
                    b.HasOne("AdionFA.Domain.Entities.HistoricalData", "HistoricalData")
                        .WithMany("HistoricalDataCandles")
                        .HasForeignKey("HistoricalDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HistoricalData");
                });

            modelBuilder.Entity("AdionFA.Domain.Entities.Project", b =>
                {
                    b.HasOne("AdionFA.Domain.Entities.HistoricalData", "HistoricalData")
                        .WithMany()
                        .HasForeignKey("HistoricalDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HistoricalData");
                });

            modelBuilder.Entity("AdionFA.Domain.Entities.ProjectConfiguration", b =>
                {
                    b.HasOne("AdionFA.Domain.Entities.Configuration.AssemblyBuilderConfiguration", "AssemblyBuilderConfiguration")
                        .WithMany()
                        .HasForeignKey("AssemblyBuilderConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdionFA.Domain.Entities.Configuration.CrossingBuilderConfiguration", "CrossingBuilderConfiguration")
                        .WithMany()
                        .HasForeignKey("CrossingBuilderConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdionFA.Domain.Entities.Configuration.NodeBuilderConfiguration", "NodeBuilderConfiguration")
                        .WithMany()
                        .HasForeignKey("NodeBuilderConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdionFA.Domain.Entities.Project", "Project")
                        .WithOne("ProjectConfiguration")
                        .HasForeignKey("AdionFA.Domain.Entities.ProjectConfiguration", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssemblyBuilderConfiguration");

                    b.Navigation("CrossingBuilderConfiguration");

                    b.Navigation("NodeBuilderConfiguration");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("AdionFA.Domain.Entities.ProjectScheduleConfiguration", b =>
                {
                    b.HasOne("AdionFA.Domain.Entities.MarketRegion", "MarketRegion")
                        .WithMany()
                        .HasForeignKey("MarketRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdionFA.Domain.Entities.ProjectConfiguration", "ProjectConfiguration")
                        .WithMany("ProjectScheduleConfigurations")
                        .HasForeignKey("ProjectConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarketRegion");

                    b.Navigation("ProjectConfiguration");
                });

            modelBuilder.Entity("AdionFA.Domain.Entities.GlobalConfiguration", b =>
                {
                    b.Navigation("GlobalScheduleConfigurations");
                });

            modelBuilder.Entity("AdionFA.Domain.Entities.HistoricalData", b =>
                {
                    b.Navigation("HistoricalDataCandles");
                });

            modelBuilder.Entity("AdionFA.Domain.Entities.Project", b =>
                {
                    b.Navigation("ProjectConfiguration");
                });

            modelBuilder.Entity("AdionFA.Domain.Entities.ProjectConfiguration", b =>
                {
                    b.Navigation("ProjectScheduleConfigurations");
                });
#pragma warning restore 612, 618
        }
    }
}
