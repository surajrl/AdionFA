<UserControl x:Class="AdionFA.UI.ProjectStation.Views.MetaTraderView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:behaviors="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:dialog="clr-namespace:MahApps.Metro.Controls.Dialogs;assembly=MahApps.Metro"
             xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
             xmlns:infrastructure="clr-namespace:AdionFA.UI.Infrastructure;assembly=AdionFA.UI.Infrastructure"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:metro="http://metro.mahapps.com/winfx/xaml/controls"
             d:DesignHeight="1080"
             d:DesignWidth="1920"
             dialog:DialogParticipation.Register="{Binding}"
             mc:Ignorable="d">

    <UserControl.Resources>
        <Thickness x:Key="ColumnMargin">
            10 5 10 5
        </Thickness>
        <Thickness x:Key="ControlMargin">
            0 5 25 5
        </Thickness>

        <Style x:Key="DisableBorderRarioBtn"
               TargetType="Button">
            <Setter Property="Padding" Value="5,0,5,0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border BorderBrush="{StaticResource MahApps.Brushes.Button.Border}"
                                BorderThickness="0,1,1,1"
                                CornerRadius="0,2,2,0">
                            <ContentPresenter x:Name="contentPresenter"
                                              Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Content="{TemplateBinding Content}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background">
                                    <Setter.Value>
                                        <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                            <GradientStop Offset="0" Color="#FF5BB75B" />
                                            <GradientStop Offset="1" Color="#FF398239" />
                                        </LinearGradientBrush>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Cursor" Value="Hand" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="Body_Content_DataGrid_Centering"
               TargetType="{x:Type DataGridCell}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridCell}">
                        <Grid Background="{TemplateBinding Background}">
                            <ContentPresenter VerticalAlignment="Center" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>

    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition />
        </Grid.RowDefinitions>

        <StackPanel HorizontalAlignment="Right"
                    Orientation="Horizontal">
            <!--  Stop Button  -->
            <Grid Margin="0,20,10,0">
                <Button Width="80"
                        Height="40"
                        Command="{Binding StopCommand}">
                    <StackPanel Orientation="Horizontal">
                        <iconPacks:FontAwesome Width="14"
                                               Kind="PauseCircleSolid" />
                        <Label Content="Stop"
                               FontSize="11" />
                    </StackPanel>
                </Button>
            </Grid>

            <!--  Process Button  -->
            <Grid Margin="0,20,0,0">
                <Button Width="80"
                        Height="40"
                        Command="{Binding ProcessCommand}"
                        IsEnabled="{Binding CanExecute}">
                    <StackPanel Orientation="Horizontal"
                                Visibility="{Binding IsTransactionActive, Converter={StaticResource InverseBooleanToVisibilityConverter}}">
                        <iconPacks:FontAwesome Width="14"
                                               Kind="PlaySolid" />
                        <Label Content="Process"
                               FontSize="11" />
                    </StackPanel>
                </Button>
                <metro:ProgressRing Width="25"
                                    Height="25"
                                    IsActive="True"
                                    Visibility="{Binding IsTransactionActive, Converter={StaticResource BooleanToVisibilityConverter}}" />
            </Grid>

        </StackPanel>

        <!--  Expert Advisor  -->
        <Expander Grid.Row="1"
                  Margin="0,10,0,10"
                  Header="Expert Advisor"
                  IsExpanded="False"
                  Style="{DynamicResource ControlExpanderStyle}">
            <StackPanel Orientation="Horizontal">
                <StackPanel Margin="{StaticResource ColumnMargin}">
                    <Label Content="Expert Advisor Host" />
                    <TextBox Width="225"
                             Focusable="False"
                             IsEnabled="False"
                             IsReadOnly="True"
                             Text="{Binding ProjectConfiguration.ExpertAdvisorHost}" />
                </StackPanel>
                <StackPanel Margin="{StaticResource ColumnMargin}">
                    <Label Content="Expert Advisor Publisher Port" />
                    <TextBox Width="225"
                             Focusable="False"
                             IsEnabled="False"
                             IsReadOnly="True"
                             Text="{Binding ProjectConfiguration.ExpertAdvisorPublisherPort}" />
                </StackPanel>
                <StackPanel Margin="{StaticResource ColumnMargin}">
                    <Label Content="Expert Advisor Response Port" />
                    <TextBox Width="225"
                             Focusable="False"
                             IsEnabled="False"
                             IsReadOnly="True"
                             Text="{Binding ProjectConfiguration.ExpertAdvisorResponsePort}" />
                </StackPanel>
            </StackPanel>

        </Expander>


        <metro:MetroHeader Grid.Row="2"
                           Header="MetaTrader">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <StackPanel Orientation="Horizontal">
                    <!--  Messages From Current Period  -->
                    <TextBlock Margin="{StaticResource ColumnMargin}"
                               HorizontalAlignment="Left"
                               VerticalAlignment="Center">
                        <Run FontWeight="SemiBold"
                             Text="Input Messages" />
                        <Run FontWeight="SemiBold"
                             Text=":" />
                        <Run Text="{Binding DataInput.Count, Mode=OneWay}" />
                    </TextBlock>

                    <!--  Clean Input  -->
                    <Grid Margin="{StaticResource ColumnMargin}">
                        <Button Width="100"
                                Height="40"
                                Command="{Binding CleanMessageInputCommand}">
                            <StackPanel Orientation="Horizontal">
                                <iconPacks:PackIconMaterial Width="14"
                                                            VerticalAlignment="Center"
                                                            Kind="TextBoxRemoveOutline" />
                                <Label Content="Clean Input"
                                       FontSize="11" />
                            </StackPanel>
                        </Button>
                    </Grid>

                    <!--  Clean Output  -->
                    <Grid Margin="{StaticResource ColumnMargin}">
                        <Button Width="100"
                                Height="40"
                                Command="{Binding CleanMessageOutputCommand}">
                            <StackPanel Orientation="Horizontal">
                                <iconPacks:PackIconMaterial Width="14"
                                                            VerticalAlignment="Center"
                                                            Kind="TextBoxRemoveOutline" />
                                <Label Content="Clean Output"
                                       FontSize="11" />
                            </StackPanel>
                        </Button>
                    </Grid>
                </StackPanel>

                <!--  Toggle Switch  -->
                <StackPanel Grid.Column="1"
                            Orientation="Horizontal">
                    <StackPanel>
                        <Label Content="Test Strategy Node" />
                        <metro:ToggleSwitch IsEnabled="{Binding CanExecute}"
                                            IsOn="{Binding TestStrategyNode, Mode=TwoWay}"
                                            Toggled="TestStrategyNodeToggleSwitch_Toggled" />
                    </StackPanel>
                    <StackPanel>
                        <Label Content="Test Assembly Node" />
                        <metro:ToggleSwitch IsEnabled="{Binding CanExecute}"
                                            IsOn="{Binding TestAssemblyNode, Mode=TwoWay}"
                                            Toggled="TestAssemblyNodeToggleSwitch_Toggled" />
                        <!--  Assembly Mode  -->
                        <StackPanel>
                            <Label Content="Assembly Mode" />
                            <metro:ToggleSwitch x:Name="assemblyMode"
                                                Content="Single Assembly ON"
                                                IsOn="{Binding IsMultiAssemblyMode, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                Toggled="MultiAssemblyToggleSwitch_Toggled">
                                <metro:ToggleSwitch.IsEnabled>
                                    <MultiBinding Converter="{StaticResource BooleanAndConverter}">
                                        <Binding Path="CanExecute" />
                                        <Binding Path="TestAssemblyNode" />
                                    </MultiBinding>
                                </metro:ToggleSwitch.IsEnabled>
                            </metro:ToggleSwitch>
                        </StackPanel>
                    </StackPanel>
                    <StackPanel>
                        <Label Content="Test Nodes" />
                        <metro:ToggleSwitch IsEnabled="{Binding CanExecute}"
                                            IsOn="{Binding TestNodes, Mode=TwoWay}"
                                            Toggled="TestNodesToggleSwitch_Toggled" />
                    </StackPanel>

                </StackPanel>

                <!--  Strategy, Assembly & Nodes Buttons  -->
                <StackPanel Grid.Column="2"
                            HorizontalAlignment="Right"
                            Orientation="Horizontal">

                    <!--  Strategy Node  -->
                    <Grid Margin="{StaticResource ColumnMargin}">
                        <Button x:Name="strategyNodesBtn"
                                Width="125"
                                Height="40"
                                IsEnabled="{Binding StrategyNode, Converter={StaticResource NullToBooleanConverter}}">
                            <StackPanel Orientation="Horizontal">
                                <iconPacks:PackIconMaterial Width="15"
                                                            VerticalAlignment="Center"
                                                            Kind="Graph" />
                                <Label Content="Strategy Node"
                                       FontSize="11" />
                            </StackPanel>
                            <behaviors:Interaction.Triggers>
                                <behaviors:EventTrigger EventName="Click"
                                                        SourceName="strategyNodesBtn">
                                    <behaviors:InvokeCommandAction Command="{x:Static infrastructure:ApplicationCommands.ShowFlyoutCommand}">
                                        <behaviors:InvokeCommandAction.CommandParameter>
                                            <MultiBinding Converter="{StaticResource CommandParameterFlyoutConverter}">
                                                <Binding Source="{x:Static infrastructure:FlyoutRegions.FlyoutProjectModuleStrategyNodes}" />
                                                <Binding Path="StrategyNode" />
                                            </MultiBinding>
                                        </behaviors:InvokeCommandAction.CommandParameter>
                                    </behaviors:InvokeCommandAction>
                                </behaviors:EventTrigger>
                            </behaviors:Interaction.Triggers>
                        </Button>
                    </Grid>
                    <!--  Assembly Node  -->
                    <Grid Margin="{StaticResource ColumnMargin}">
                        <Button x:Name="assemblyNodesBtn"
                                Width="125"
                                Height="40"
                                IsEnabled="{Binding AssemblyNodes.Count, Converter={StaticResource IntToBooleanConverter}}">
                            <StackPanel Orientation="Horizontal">
                                <iconPacks:PackIconMaterial Width="15"
                                                            VerticalAlignment="Center"
                                                            Kind="Graph" />
                                <Label Content="Assembly Nodes"
                                       FontSize="11" />
                            </StackPanel>
                            <behaviors:Interaction.Triggers>
                                <behaviors:EventTrigger EventName="Click"
                                                        SourceName="assemblyNodesBtn">
                                    <behaviors:InvokeCommandAction Command="{x:Static infrastructure:ApplicationCommands.ShowFlyoutCommand}">
                                        <behaviors:InvokeCommandAction.CommandParameter>
                                            <MultiBinding Converter="{StaticResource CommandParameterFlyoutConverter}">
                                                <Binding Source="{x:Static infrastructure:FlyoutRegions.FlyoutProjectModuleAssemblyNodes}" />
                                                <Binding Path="AssemblyNodes" />
                                            </MultiBinding>
                                        </behaviors:InvokeCommandAction.CommandParameter>
                                    </behaviors:InvokeCommandAction>
                                </behaviors:EventTrigger>
                            </behaviors:Interaction.Triggers>
                        </Button>
                    </Grid>
                    <!--  Nodes  -->
                    <Grid Margin="{StaticResource ColumnMargin}">
                        <Button x:Name="nodeBtn"
                                Width="80"
                                Height="40"
                                IsEnabled="{Binding SingleNodes.Count, Converter={StaticResource IntToBooleanConverter}}">
                            <StackPanel Orientation="Horizontal">
                                <iconPacks:PackIconMaterial Width="15"
                                                            VerticalAlignment="Center"
                                                            Kind="Graph" />
                                <Label Content="Nodes"
                                       FontSize="11" />
                            </StackPanel>
                            <behaviors:Interaction.Triggers>
                                <behaviors:EventTrigger EventName="Click"
                                                        SourceName="nodeBtn">
                                    <behaviors:InvokeCommandAction Command="{x:Static infrastructure:ApplicationCommands.ShowFlyoutCommand}">
                                        <behaviors:InvokeCommandAction.CommandParameter>
                                            <MultiBinding Converter="{StaticResource CommandParameterFlyoutConverter}">
                                                <Binding Source="{x:Static infrastructure:FlyoutRegions.FlyoutProjectModuleSingleNodes}" />
                                                <Binding Path="SingleNodes" />
                                            </MultiBinding>
                                        </behaviors:InvokeCommandAction.CommandParameter>
                                    </behaviors:InvokeCommandAction>
                                </behaviors:EventTrigger>
                            </behaviors:Interaction.Triggers>
                        </Button>

                    </Grid>
                </StackPanel>


            </Grid>
        </metro:MetroHeader>

        <Grid Grid.Row="3"
              Margin="0,10,0,0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <Grid Grid.ColumnSpan="2">
                <Grid Name="dummygrid"
                      Visibility="Hidden">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="0.8*" />
                        <ColumnDefinition Width="1.2*" />
                        <ColumnDefinition Width="1*" />
                        <ColumnDefinition Width="1*" />
                        <ColumnDefinition Width="1*" />
                        <ColumnDefinition Width="1*" />
                        <ColumnDefinition Width="0.8*" />
                        <ColumnDefinition Width="0.8*" />
                    </Grid.ColumnDefinitions>
                    <Border Name="dummywidth0"
                            Grid.Column="0" />
                    <Border Name="dummywidth1"
                            Grid.Column="1" />
                    <Border Name="dummywidth2"
                            Grid.Column="2" />
                    <Border Name="dummywidth3"
                            Grid.Column="3" />
                    <Border Name="dummywidth4"
                            Grid.Column="4" />
                    <Border Name="dummywidth5"
                            Grid.Column="5" />
                    <Border Name="dummywidth6"
                            Grid.Column="6" />
                    <Border Name="dummywidth7"
                            Grid.Column="7" />
                </Grid>
                <!--  Message Input  -->
                <metro:MetroHeader Margin="0,0,10,0"
                                   Header="MessageInput">
                    <ListView ItemsSource="{Binding DataInput}"
                              Style="{StaticResource MahApps.Styles.ListView.Virtualized}">
                        <ListView.View>
                            <GridView>
                                <GridViewColumn Width="{Binding ElementName=dummywidth0, Path=ActualWidth}"
                                                DisplayMemberBinding="{Binding Symbol}"
                                                Header="Symbol" />
                                <GridViewColumn Width="{Binding ElementName=dummywidth1, Path=ActualWidth}"
                                                DisplayMemberBinding="{Binding DateFormat}"
                                                Header="Date" />
                                <GridViewColumn Width="{Binding ElementName=dummywidth2, Path=ActualWidth}"
                                                DisplayMemberBinding="{Binding Open, StringFormat=N5}"
                                                Header="Open" />
                                <GridViewColumn Width="{Binding ElementName=dummywidth3, Path=ActualWidth}"
                                                DisplayMemberBinding="{Binding High, StringFormat=N5}"
                                                Header="High" />
                                <GridViewColumn Width="{Binding ElementName=dummywidth4, Path=ActualWidth}"
                                                DisplayMemberBinding="{Binding Low, StringFormat=N5}"
                                                Header="Low" />
                                <GridViewColumn Width="{Binding ElementName=dummywidth5, Path=ActualWidth}"
                                                DisplayMemberBinding="{Binding Close, StringFormat=N5}"
                                                Header="Close" />
                                <GridViewColumn Width="{Binding ElementName=dummywidth6, Path=ActualWidth}"
                                                DisplayMemberBinding="{Binding Volume}"
                                                Header="Volume" />
                                <GridViewColumn Width="{Binding ElementName=dummywidth7, Path=ActualWidth}"
                                                DisplayMemberBinding="{Binding Spread}"
                                                Header="Spread" />
                            </GridView>
                        </ListView.View>
                    </ListView>
                </metro:MetroHeader>
            </Grid>
            <Grid Grid.Column="3">
                <Grid Name="dummygrid1"
                      Visibility="Hidden">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="0.4*" />
                        <ColumnDefinition Width="1.2*" />
                        <ColumnDefinition Width="0.8*" />
                        <ColumnDefinition Width="0.8*" />
                    </Grid.ColumnDefinitions>
                    <Border Name="dummywidth10"
                            Grid.Column="0" />
                    <Border Name="dummywidth11"
                            Grid.Column="1" />
                    <Border Name="dummywidth12"
                            Grid.Column="2" />
                    <Border Name="dummywidth13"
                            Grid.Column="3" />
                </Grid>
                <!--  Message Output  -->
                <metro:MetroHeader Margin="10,0,0,0"
                                   Header="Message Output">
                    <ListView ItemsSource="{Binding DataOutput}"
                              Style="{StaticResource MahApps.Styles.ListView.Virtualized}">
                        <ListView.View>
                            <GridView>
                                <GridViewColumn Width="{Binding ElementName=dummywidth10, Path=ActualWidth}"
                                                DisplayMemberBinding="{Binding Id}"
                                                Header="ID" />

                                <GridViewColumn Width="{Binding ElementName=dummywidth11, Path=ActualWidth}"
                                                DisplayMemberBinding="{Binding DateFormat}"
                                                Header="Date" />

                                <GridViewColumn Width="{Binding ElementName=dummywidth12, Path=ActualWidth}"
                                                DisplayMemberBinding="{Binding OrderType}"
                                                Header="Order Type" />

                                <GridViewColumn Width="{Binding ElementName=dummywidth13, Path=ActualWidth}"
                                                DisplayMemberBinding="{Binding Volume, StringFormat=N5}"
                                                Header="Volume" />
                            </GridView>
                        </ListView.View>
                    </ListView>
                </metro:MetroHeader>
            </Grid>
        </Grid>
    </Grid>
</UserControl>